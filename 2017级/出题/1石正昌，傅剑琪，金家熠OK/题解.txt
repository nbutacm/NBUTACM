#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
const int INF=0x3f3f3f3f;
const int N=1e5+10;

vector < pair<int,int> > E[N];
int n,m,S,l,v;
int d[N];
bool vis[N];

void init(){
    for(int i=0;i<N;i++) E[i].clear();
}

void dijkstra(int s){
	memset(vis,0,sizeof(vis));
	for(int i=0;i<N;i++) d[i]=INF;
    priority_queue < pair<int,int> > Q;
    d[s]=0;
    Q.push(make_pair(-d[s],s));
    
    while(!Q.empty()){
        int now=Q.top().second;
        Q.pop();
        if(vis[now]) continue;
        vis[now]=1;
        for(int i=0;i<E[now].size();i++){
            int v=E[now][i].first;
            int D=d[now]+E[now][i].second;
            if(d[v]>D){
                d[v]=D;
                Q.push(make_pair(-d[v],v));
            }
        }
    }
}

int main()
{
	int T;
	cin>>T;
	while(T--){
		init();
		int x,y,t,a;
		cin>>n>>m>>S>>l>>v;
		int stt;
		for(int i=1;i<=m;i++){
			cin>>x>>y>>t>>a;
			if(a==1) stt=y;
			E[x].push_back(make_pair(y,t));
			E[y].push_back(make_pair(x,t));
		}
		dijkstra(S);
		int t1=d[stt];
		dijkstra(stt);
		t1+=d[l];
		if(v>=t1) cout<<t1<<endl;
		else cout<<-1<<endl;
	}
	return 0;
}



注：这题的钥匙有且只有一个，只要找到这个钥匙，从起点到钥匙，再从钥匙到终点，计算两次最短路径，得到花费的时间，最后和自己拥有的时间比较得到答案。